// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  A.swift
//
//  Created by Joshua Davis.
//

import Sailboat

/// Together with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address.
public struct A: HTMLElement {
    public struct ElementAttributeGroup: AttributeGroup, GlobalAttributeGroup {
        public let name: String
        public let value: String
        
        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }
        
        public static func href(_ value: String) -> Self {
            .init(name: "href", value: value.description)
        }

        public static func download(_ value: String) -> Self {
            .init(name: "download", value: value.description)
        }

        public static func hreflang(_ value: String) -> Self {
            .init(name: "hreflang", value: value.description)
        }

        public static func media(_ value: String) -> Self {
            .init(name: "media", value: value.description)
        }

        public static func ping(_ value: String...) -> Self {
            .init(name: "ping", value: value.map{ $0.description }.joined(separator: " "))
        }

        public static func referrerpolicy(_ value: String) -> Self {
            .init(name: "referrerpolicy", value: value.description)
        }

        public static func rel(_ value: String) -> Self {
            .init(name: "rel", value: value.description)
        }

        public static func target(_ value: String) -> Self {
            .init(name: "target", value: value.description)
        }

    }

    /// name of the html tag associated with this type
    public var name: String { "a" }

    /// attributes associated with this type
    public var attributes: [String: String]

    /// events associated with this type
    public var events: Events

    /// content that is contained by this html element
    public var content: TagContent

    public init() {   
        self.init("")       
    }

    public init(_ attributes: ElementAttributeGroup..., @PageBuilder content: @escaping () -> any Operator) {
        self.content = .list(content)
        self.attributes = .init()
        
        for attribute in attributes {
            self.attributes[attribute.name] = attribute.value
        }
        
        self.events = [:]

    }
    
    public init(_ text: String) {
        self.content = .text(text)
        self.attributes = .init()
        self.events = [:]
    }
    
    public func href(_ value: String) -> Self {
        return attribute(.href(value))
    }

}
