// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Meta.swift
//
//  Created by Joshua Davis.
//

import Sailboat

/// The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.
public struct Meta: Element {
    public struct ElementAttributeGroup: AttributeGroup, GlobalAttributeGroup {
        public let name: String
        public let value: String
        
        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        ///Declares the document's character encoding.
        static func charset(_ value: String) -> Self {
            .init(name: "charset", value: value.description)
        }

        ///The value of the element.
        static func content(_ value: String) -> Self {
            .init(name: "content", value: value.description)
        }

        ///Indicates that the content is a pragma directive.
        static func httpEquiv(_ value: String) -> Self {
            .init(name: "httpEquiv", value: value.description)
        }

        ///The name of the metadata.
        static func name(_ value: String) -> Self {
            .init(name: "name", value: value.description)
        }

    }

    /// name of the html tag associated with this type
    public var name: String { "meta" }

    /// attributes associated with this type
    public var attributes: [String: String]

    /// events associated with this type
    public var events: [String: (EventResult) -> Void]

    /// content that is contained by this html element
    public var content: TagContent

    public var renderer: any Renderable = JSNodeRenderer()


    public init() {   
        self.content = .text("")
        self.attributes = .init()
        self.events = .init()
    }

}

// MARK: - Attributes
public extension Meta {
    ///Declares the document's character encoding.
    func charset(_ value: String) -> Self {
        attribute(.init(name: "charset", value: value.description))
    }

    ///The value of the element.
    func content(_ value: String) -> Self {
        attribute(.init(name: "content", value: value.description))
    }

    ///Indicates that the content is a pragma directive.
    func httpEquiv(_ value: String) -> Self {
        attribute(.init(name: "httpEquiv", value: value.description))
    }

    ///The name of the metadata.
    func name(_ value: String) -> Self {
        attribute(.init(name: "name", value: value.description))
    }

}