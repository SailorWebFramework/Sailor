// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Audio.swift
//
//  Created by Joshua Davis.
//

import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

extension HTML {
    /// The audio element represents a sound or audio stream.
    public struct Audio: BodyElement {
        /// name of the html tag associated with this type
        public static var name: String { "audio" }

        /// attributes associated with this type
        public var attributes: [String: () -> any AttributeValue]

        /// events associated with this type
        public var events: [String: (EventResult) -> Void]

        /// content that is contained by this html element
        public var content: () -> any Fragment

        public var renderer: any Renderable
        
        internal init(bodyValue: (() -> any Fragment)?) {
            self.attributes = [:]
            self.events = [:]
            self.content = bodyValue ?? { List() }
            #if os(WASI)
            self.renderer = JSNode(named: Self.name)
            #else
            self.renderer = EmptyRenderer()
            #endif
        }

        public init() {  
            self.init(bodyValue: nil)
        }


    }
}
// MARK: - Attributes
public extension HTML.Audio {
    ///A Boolean attribute; if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.
    func `autoplay`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "autoplay", value: { value().description }))
    }

    ///If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.
    func `controls`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "controls", value: { value().description }))
    }

    ///How the element handles cross-origin requests.
    func `crossorigin`(_ value: @autoclosure @escaping () -> Unit.CrossOrigin) -> Self {
        attribute(.init(name: "crossorigin", value: { value().description }))
    }

    ///A Boolean attribute; if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.
    func `loop`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "loop", value: { value().description }))
    }

    ///A Boolean attribute; if specified, the audio will be initially silenced.
    func `muted`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "muted", value: { value().description }))
    }

    ///This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience.
    func `preload`(_ value: @autoclosure @escaping () -> Unit.Preload) -> Self {
        attribute(.init(name: "preload", value: { value().description }))
    }

    ///The URL of the audio file.
    func `src`(_ value: @autoclosure @escaping () -> String) -> Self {
        attribute(.init(name: "src", value: { value().description }))
    }

}