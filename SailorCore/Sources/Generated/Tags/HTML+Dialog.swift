// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Dialog.swift
//
//  Created by Joshua Davis.
//

import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

extension HTML {
    /// The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window.
    public struct Dialog: BodyElement {
        /// name of the html tag associated with this type
        public static var name: String { "dialog" }

        /// attributes associated with this type
        public var attributes: [String: () -> any AttributeValue]

        /// events associated with this type
        public var events: [String: (EventResult) -> Void]

        /// content that is contained by this html element
        public var content: () -> any Fragment

        public var renderer: any Renderable
        
        internal init(bodyValue: (() -> any Fragment)?) {
            self.attributes = [:]
            self.events = [:]
            self.content = bodyValue ?? { List() }
            #if os(WASI)
            self.renderer = JSNode(named: Self.name)
            #else
            self.renderer = EmptyRenderer()
            #endif
        }

        public init(@PageBuilder _ content: @escaping () -> any Fragment) {
            self.init(bodyValue: content)
        }


    }
}
// MARK: - Attributes
public extension HTML.Dialog {
    ///A Boolean attribute indicating whether the dialog is available for interaction.
    func `open`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "open", value: { value().description }))
    }

}