// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Base.swift
//
//  Created by Joshua Davis.
//

import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

/// The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks.
public struct Base: HeadElement {
    /// name of the html tag associated with this type
    public static var name: String { "base" }

    /// attributes associated with this type
    public var attributes: [String: () -> any AttributeValue]

    /// events associated with this type
    public var events: [String: (EventResult) -> Void]

    /// content that is contained by this html element
    public var content: () -> any Fragment

    public var renderer: any Renderable
    
    internal init(bodyValue: (() -> any Fragment)?) {
        self.attributes = [:]
        self.events = [:]
        self.content = bodyValue ?? { List() }
        #if os(WASI)
        self.renderer = JSNode(named: Self.name)
        #else
        self.renderer = EmptyRenderer()
        #endif
    }

    public init(href: @autoclosure @escaping () -> String) {
        self.init(bodyValue: nil)

        self.attributes["href"] = { href().description }
    }

    public init(target: @autoclosure @escaping () -> String) {
        self.init(bodyValue: nil)

        self.attributes["target"] = { target().description }
    }

    public init(href: @autoclosure @escaping () -> String, target: @autoclosure @escaping () -> String) {
        self.init(bodyValue: nil)

        self.attributes["href"] = { href().description }
        self.attributes["target"] = { target().description }
    }


}

// MARK: - Attributes
public extension Base {
    ///The base URL to be used throughout the document for relative URLs.
    func `href`(_ value: @autoclosure @escaping () -> String) -> Self {
        attribute(.init(name: "href", value: { value().description }))
    }

    ///The default browsing context for the purposes of following hyperlinks.
    func `target`(_ value: @autoclosure @escaping () -> Unit.Target) -> Self {
        attribute(.init(name: "target", value: { value().description }))
    }

}