// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Select.swift
//
//  Created by Joshua Davis.
//

import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

extension HTML {
    /// The select element represents a control for selecting amongst a set of options.
    public struct Select: BodyElement {
        /// name of the html tag associated with this type
        @_spi(Private) public static var name: String { "select" }

        /// attributes associated with this type
        @_spi(Private) public var attributes: [String: () -> any AttributeValue]

        /// events associated with this type
        @_spi(Private) public var events: [String: (EventResult) -> Void]

        /// content that is contained by this html element
        @_spi(Private) public var content: () -> any Fragment

        /// renderer that is used to render this element
        @_spi(Private) public var renderer: any Renderable

        @_spi(Private)
        public var body: Never {
            .error()
        }
        
        internal init(bodyValue: (() -> any Fragment)?) {
            self.attributes = [:]
            self.events = [:]
            self.content = bodyValue ?? { List() }
            #if os(WASI)
            self.renderer = JSNode(named: Self.name)
            #else
            self.renderer = EmptyRenderer()
            #endif
        }

        public init(@PageBuilder _ content: @escaping () -> any Fragment) {
            self.init(bodyValue: content)
        }


    }
}
// MARK: - Attributes
public extension HTML.Select {
    ///Specifies whether the form control should have autocomplete enabled.
    func `autocomplete`(_ value: @autoclosure @escaping () -> Unit.Toggle) -> Self {
        attribute(.init(name: "autocomplete", value: { value().description }))
    }

    ///Specifies that the form control is disabled.
    func `disabled`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "disabled", value: { value().description }))
    }

    ///The form element that the select element is associated with (its form owner).
    func `form`(_ value: @autoclosure @escaping () -> String) -> Self {
        attribute(.init(name: "form", value: { value().description }))
    }

    ///Specifies that multiple options can be selected at once.
    func `multiple`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "multiple", value: { value().description }))
    }

    ///The name of the select element.
    func `name`(_ value: @autoclosure @escaping () -> String) -> Self {
        attribute(.init(name: "name", value: { value().description }))
    }

    ///Specifies that the user must select a value before submitting the form.
    func `required`(_ value: @autoclosure @escaping () -> Bool) -> Self {
        attribute(.init(name: "required", value: { value().description }))
    }

    ///The number of options to show in the control.
    func `size`(_ value: @autoclosure @escaping () -> Int) -> Self {
        attribute(.init(name: "size", value: { value().description }))
    }

}