// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Property.swift
//
//  Created by Joshua Davis on 10/5/23.
//

public extension Property {
    /// Sets the accent color property.
    static func accentColor(_ color: Unit.Color) -> Property {
        Property(
            name: "accent-color",
            value: "\(color.description)"
        )
    }

    /// Sets the align-content property.
    static func alignContent(_ value: Unit.AlignContent) -> Property {
        Property(
            name: "align-content",
            value: "\(value.description)"
        )
    }

    /// Sets the align-items property.
    static func alignItems(_ value: Unit.AlignItems) -> Property {
        Property(
            name: "align-items",
            value: "\(value.description)"
        )
    }

    /// Sets the align-self property.
    static func alignSelf(_ value: Unit.AlignSelf) -> Property {
        Property(
            name: "align-self",
            value: "\(value.description)"
        )
    }

    /// Sets the aspect-ratio property.
    static func aspectRatio(_ value: Unit.AspectRatio) -> Property {
        Property(
            name: "aspect-ratio",
            value: "\(value.description)"
        )
    }

    /// The appearance CSS property is used to display UI elements with platform-specific styling, based on the operating system's theme.
    static func appearance(_ value: Unit.Appearance) -> Property {
        Property(
            name: "appearance",
            value: "\(value.description)"
        )
    }

    /// Add a graphical effect to the area behind an element.
    static func backdropFilter(_ filter: Unit.Filter) -> Property {
        Property(
            name: "backdrop-filter",
            value: "\(filter.description)"
        )
    }

    /// Sets the visibility of the back face of an element.
    static func backfaceVisibility(_ visibility: Unit.Visibility) -> Property {
        Property(
            name: "backface-visibility",
            value: "\(visibility.description)"
        )
    }

    /// Sets whether a background image is fixed or scrolls with the rest of the page.
    static func backgroundAttachment(_ attachment: Unit.Attachment) -> Property {
        Property(
            name: "background-attachment",
            value: "\(attachment.description)"
        )
    }

    /// Sets the background blend mode property.
    static func backgroundBlendMode(_ blendMode: Unit.BlendMode) -> Property {
        Property(
            name: "background-blend-mode",
            value: "\(blendMode.description)"
        )
    }

    /// Sets the background clip property.
    static func backgroundClip(_ visualBox: Unit.VisualBox) -> Property {
        Property(
            name: "background-clip",
            value: "\(visualBox.description)"
        )
    }

    /// Sets the background color property.
    static func backgroundColor(_ color: Unit.Color) -> Property {
        Property(
            name: "background-color",
            value: "\(color.description)"
        )
    }

    /// Sets the background origin property.
    static func backgroundOrigin(_ visualBox: Unit.VisualBox) -> Property {
        Property(
            name: "background-origin",
            value: "\(visualBox.description)"
        )
    }

    /// Sets the background position property.
    static func backgroundPositionX(_ positionX: Unit.PositionX) -> Property {
        Property(
            name: "background-position-x",
            value: "\(positionX.description)"
        )
    }

    /// Sets the background position property.
    static func backgroundPositionY(_ positionY: Unit.PositionY) -> Property {
        Property(
            name: "background-position-y",
            value: "\(positionY.description)"
        )
    }

    /// Sets the background position property.
    static func backgroundRepeat(_ positionY: Unit.Repeat) -> Property {
        Property(
            name: "background-repeat",
            value: "\(positionY.description)"
        )
    }

    /// Sets the background position property.
    static func backgroundSize(_ positionY: Unit.BgSize) -> Property {
        Property(
            name: "background-size",
            value: "\(positionY.description)"
        )
    }

    /// The block-size CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode.
    static func blockSize(_ blockSize: Unit.BlockSize) -> Property {
        Property(
            name: "block-size",
            value: "\(blockSize.description)"
        )
    }

    /// Sets the border block color property.
    static func borderBlockColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-block-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border block end property.
    static func borderBlockEnd(_ color: Unit.Color, _ style: Unit.LineStyle, _ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-block-end",
            value: "\(color.description) \(style.description) \(width.description)"
        )
    }

    /// Sets the border block end color property.
    static func borderBlockEndColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-block-end-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border block end style property.
    static func borderBlockEndStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-block-end-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border block end width property.
    static func borderBlockEndWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-block-end-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border block start property.
    static func borderBlockStart(_ color: Unit.Color, _ style: Unit.LineStyle, _ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-block-start",
            value: "\(color.description) \(style.description) \(width.description)"
        )
    }

    /// Sets the border block start color property.
    static func borderBlockStartColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-block-start-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border block start style property.
    static func borderBlockStartStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-block-start-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border block start width property.
    static func borderBlockStartWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-block-start-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border block style property.
    static func borderBlockStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-block-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border block width property.
    static func borderBlockWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-block-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border bottom color property.
    static func borderBottomColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-bottom-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border bottom left radius property.
    static func borderBottomLeftRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-bottom-left-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border bottom right radius property.
    static func borderBottomRightRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-bottom-right-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border bottom style property.
    static func borderBottomStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-bottom-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border bottom width property.
    static func borderBottomWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-bottom-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border collapse property.
    static func borderCollapse(_ value: Unit.BorderCollapse) -> Property {
        Property(
            name: "border-collapse",
            value: "\(value.description)"
        )
    }

    /// Sets the border color property.
    static func borderColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border end end radius property.
    static func borderEndEndRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-end-end-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border end start radius property.
    static func borderEndStartRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-end-start-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border image outset property.
    static func borderImageOutset(_ outset: Unit.LengthNumber) -> Property {
        Property(
            name: "border-image-outset",
            value: "\(outset.description)"
        )
    }

    /// Sets the border image repeat property.
    static func borderImageRepeat(_ imageRepeat: Unit.RepeatImage) -> Property {
        Property(
            name: "border-image-repeat",
            value: "\(imageRepeat.description)"
        )
    }

    /// Sets the border image slice property.
    static func borderImageSlice(_ slice: Unit.SliceImage) -> Property {
        Property(
            name: "border-image-slice",
            value: "\(slice.description)"
        )
    }

    /// Sets the border image source property.
    static func borderImageSource(_ image: Unit.ImageSource) -> Property {
        Property(
            name: "border-image-source",
            value: "\(image.description)"
        )
    }

    /// Sets the border image width property.
    static func borderImageWidth(_ width: Unit.LengthNumber) -> Property {
        Property(
            name: "border-image-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border inline color property.
    static func borderInlineColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-inline-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border inline end property.
    static func borderInlineEnd(_ color: Unit.Color, _ style: Unit.LineStyle, _ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-inline-end",
            value: "\(color.description) \(style.description) \(width.description)"
        )
    }

    /// Sets the border inline end color property.
    static func borderInlineEndColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-inline-end-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border inline end style property.
    static func borderInlineEndStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-inline-end-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border inline end width property.
    static func borderInlineEndWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-inline-end-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border inline start property.
    static func borderInlineStart(_ color: Unit.Color, _ style: Unit.LineStyle, _ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-inline-start",
            value: "\(color.description) \(style.description) \(width.description)"
        )
    }

    /// Sets the border inline start color property.
    static func borderInlineStartColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-inline-start-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border inline start style property.
    static func borderInlineStartStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-inline-start-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border inline start width property.
    static func borderInlineStartWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-inline-start-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border inline style property.
    static func borderInlineStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-inline-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border inline width property.
    static func borderInlineWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-inline-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border left color property.
    static func borderLeftColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-left-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border left style property.
    static func borderLeftStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-left-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border left width property.
    static func borderLeftWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-left-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border radius property.
    static func borderRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border right color property.
    static func borderRightColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-right-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border right style property.
    static func borderRightStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-right-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border right width property.
    static func borderRightWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-right-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border spacing property.
    static func borderSpacing(_ length: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-spacing",
            value: "\(length.description)"
        )
    }

    /// Sets the border start end radius property.
    static func borderStartEndRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-start-end-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border start start radius property.
    static func borderStartStartRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-start-start-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border style property.
    static func borderStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border top color property.
    static func borderTopColor(_ color: Unit.Color) -> Property {
        Property(
            name: "border-top-color",
            value: "\(color.description)"
        )
    }

    /// Sets the border top left radius property.
    static func borderTopLeftRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-top-left-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border top right radius property.
    static func borderTopRightRadius(_ radius: Unit.LengthPercentage) -> Property {
        Property(
            name: "border-top-right-radius",
            value: "\(radius.description)"
        )
    }

    /// Sets the border top style property.
    static func borderTopStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "border-top-style",
            value: "\(style.description)"
        )
    }

    /// Sets the border top width property.
    static func borderTopWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-top-width",
            value: "\(width.description)"
        )
    }

    /// Sets the border width property.
    static func borderWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "border-width",
            value: "\(width.description)"
        )
    }

    /// Sets the bottom property.
    static func bottom(_ length: Unit.AutoLengthPercentage) -> Property {
        Property(
            name: "bottom",
            value: "\(length.description)"
        )
    }

    /// Sets the break after property.
    static func breakAfter(_ value: Unit.Break) -> Property {
        Property(
            name: "break-after",
            value: "\(value.description)"
        )
    }

    /// Sets the break before property.
    static func breakBefore(_ value: Unit.Break) -> Property {
        Property(
            name: "break-before",
            value: "\(value.description)"
        )
    }

    /// Sets the break inside property.
    static func breakInside(_ value: Unit.BreakInside) -> Property {
        Property(
            name: "break-inside",
            value: "\(value.description)"
        )
    }

    /// Sets the caret color property.
    static func caretColor(_ color: Unit.AutoColor) -> Property {
        Property(
            name: "caret-color",
            value: "\(color.description)"
        )
    }

    /// Sets the clear property.
    static func clear(_ value: Unit.Clear) -> Property {
        Property(
            name: "clear",
            value: "\(value.description)"
        )
    }

    /// Sets the color property.
    static func color(_ color: Unit.Color) -> Property {
        Property(
            name: "color",
            value: "\(color.description)"
        )
    }

    /// Sets the color interpolation property.
    static func colorInterpolation(_ value: Unit.ColorInterpolation) -> Property {
        Property(
            name: "color-interpolation",
            value: "\(value.description)"
        )
    }

    /// Sets the color sceme property.
    static func colorScheme(_ value: Unit.ColorScheme) -> Property {
        Property(
            name: "color-scheme",
            value: "\(value.description)"
        )
    }

    /// Sets the column count property.
    static func columnCount(_ count: Unit.AutoInt) -> Property {
        Property(
            name: "column-count",
            value: "\(count.description)"
        )
    }

    /// Sets the column fill property.
    static func columnFill(_ value: Unit.ColumnFill) -> Property {
        Property(
            name: "column-fill",
            value: "\(value.description)"
        )
    }

    /// Sets the column gap property.
    static func columnGap(_ length: Unit.NormalLengthPercentage) -> Property {
        Property(
            name: "column-gap",
            value: "\(length.description)"
        )
    }

    /// Sets the column rule color property.
    static func columnRuleColor(_ color: Unit.Color) -> Property {
        Property(
            name: "column-rule-color",
            value: "\(color.description)"
        )
    }

    /// Sets the column rule style property.
    static func columnRuleStyle(_ style: Unit.LineStyle) -> Property {
        Property(
            name: "column-rule-style",
            value: "\(style.description)"
        )
    }

    /// Sets the column rule width property.
    static func columnRuleWidth(_ width: Unit.LineWidth) -> Property {
        Property(
            name: "column-rule-width",
            value: "\(width.description)"
        )
    }

    /// Sets the column span property.
    static func columnSpan(_ value: Unit.AllOrNone) -> Property {
        Property(
            name: "column-span",
            value: "\(value.description)"
        )
    }

    /// Sets the column width property.
    static func columnWidth(_ length: Unit.ColumnWidth) -> Property {
        Property(
            name: "column-width",
            value: "\(length.description)"
        )
    }

    /// Sets the container type property.
    static func containerType(_ value: Unit.ContainerType) -> Property {
        Property(
            name: "container-type",
            value: "\(value.description)"
        )
    }

    /// Sets the container name property.
    static func containerName(_ value: Unit.ContainerName) -> Property {
        Property(
            name: "container-name",
            value: "\(value.description)"
        )
    }

    /// Sets the direction property.
    static func direction(_ value: Unit.Direction) -> Property {
        Property(
            name: "direction",
            value: "\(value.description)"
        )
    }

    /// Sets the empty cells property.
    static func emptyCells(_ value: Unit.Shown) -> Property {
        Property(
            name: "empty-cells",
            value: "\(value.description)"
        )
    }

}