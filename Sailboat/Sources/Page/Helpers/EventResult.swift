//
//  File.swift
//
//
//  Created by Joshua Davis on 12/17/23.
//

// TODO: remove this alias its confusing
//public typealias Events = [String: (EventResult) -> Void]

public enum EventResult {
    case string(String),
         float(Double),
         bool(Bool),
         int(Int),
         none // TODO: rename to empty to not conflict with optional
}

// GENERATED BY SOURCERY
//public extension EventResult {
//	func match<ReturnedType>(
//		string: (String) -> ReturnedType,
//		float: (Double) -> ReturnedType,
//		bool: (Bool) -> ReturnedType,
//		int: (Int) -> ReturnedType,
//		none: () -> ReturnedType
//		) -> ReturnedType {
//		switch self {
//			case .string(let x1):
//				return string(x1)
//			case .float(let x1):
//				return float(x1)
//			case .bool(let x1):
//				return bool(x1)
//			case .int(let x1):
//				return int(x1)
//			case .none:
//				return none()
//		}
//	}
//
//	func matchString<ReturnedType>(or fallback: @autoclosure () -> ReturnedType, _ matchFunction: (String) -> ReturnedType) -> ReturnedType {
//		if case .string(let x1) = self {
//			return matchFunction(x1)
//		} else {
//			return fallback()
//		}
//	}
//
//	func isCaseString(_ isCaseFunction: (String) -> Bool = { _ in true }) -> Bool {
//		if case .string(let x1) = self {
//			return isCaseFunction(x1)
//		} else {
//			return false
//		}
//	}
//
//	func matchFloat<ReturnedType>(or fallback: @autoclosure () -> ReturnedType, _ matchFunction: (Double) -> ReturnedType) -> ReturnedType {
//		if case .float(let x1) = self {
//			return matchFunction(x1)
//		} else {
//			return fallback()
//		}
//	}
//
//	func isCaseFloat(_ isCaseFunction: (Double) -> Bool = { _ in true }) -> Bool {
//		if case .float(let x1) = self {
//			return isCaseFunction(x1)
//		} else {
//			return false
//		}
//	}
//
//	func matchBool<ReturnedType>(or fallback: @autoclosure () -> ReturnedType, _ matchFunction: (Bool) -> ReturnedType) -> ReturnedType {
//		if case .bool(let x1) = self {
//			return matchFunction(x1)
//		} else {
//			return fallback()
//		}
//	}
//
//	func isCaseBool(_ isCaseFunction: (Bool) -> Bool = { _ in true }) -> Bool {
//		if case .bool(let x1) = self {
//			return isCaseFunction(x1)
//		} else {
//			return false
//		}
//	}
//
//	func matchInt<ReturnedType>(or fallback: @autoclosure () -> ReturnedType, _ matchFunction: (Int) -> ReturnedType) -> ReturnedType {
//		if case .int(let x1) = self {
//			return matchFunction(x1)
//		} else {
//			return fallback()
//		}
//	}
//
//	func isCaseInt(_ isCaseFunction: (Int) -> Bool = { _ in true }) -> Bool {
//		if case .int(let x1) = self {
//			return isCaseFunction(x1)
//		} else {
//			return false
//		}
//	}
//
//	func matchNone<ReturnedType>(or fallback: @autoclosure () -> ReturnedType, _ matchFunction: () -> ReturnedType) -> ReturnedType {
//		if case .none = self {
//			return matchFunction()
//		} else {
//			return fallback()
//		}
//	}
//
//	func isCaseNone(_ isCaseFunction: () -> Bool = {  true }) -> Bool {
//		if case .none = self {
//			return isCaseFunction()
//		} else {
//			return false
//		}
//	}
//
//}
