// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Meter.swift
//


import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

extension HTML {
    /// The meter element represents a scalar measurement within a known range or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.
    public struct Meter: BodyElement {
        /// name of the html tag associated with this type
        @_spi(Private) public static var name: String { "meter" }

        /// attributes associated with this type
        @_spi(Private) public var attributes: [String: () -> any AttributeValue]

        /// events associated with this type
        @_spi(Private) public var events: [String: (EventResult) -> Void]

        /// content that is contained by this html element
        @_spi(Private) public var content: () -> any Fragment

        /// renderer that is used to render this element
        @_spi(Private) public var renderer: any Renderable

        @_spi(Private)
        public var body: Never {
            .error()
        }
        
        internal init(bodyValue: (() -> any Fragment)?) {
            self.attributes = [:]
            self.events = [:]
            self.content = bodyValue ?? { List() }
            #if os(WASI)
            self.renderer = JSNode(named: Self.name)
            #else
            self.renderer = EmptyRenderer()
            #endif
        }

        public init(@PageBuilder _ content: @escaping () -> any Fragment) {
            self.init(bodyValue: content)
        }


    }
}
// MARK: - Attributes
public extension HTML.Meter {
    ///The form element that the meter element is associated with (its form owner).
    func `form`(_ value: @autoclosure @escaping () -> String) -> Self {
        attribute(.init(name: "form", value: { value().description }))
    }

    ///The upper bound of the range.
    func `high`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "high", value: { value().description }))
    }

    ///The lower bound of the range.
    func `low`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "low", value: { value().description }))
    }

    ///The maximum value.
    func `max`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "max", value: { value().description }))
    }

    ///The minimum value.
    func `min`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "min", value: { value().description }))
    }

    ///The optimal value.
    func `optimum`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "optimum", value: { value().description }))
    }

    ///The value.
    func `value`(_ value: @autoclosure @escaping () -> Double) -> Self {
        attribute(.init(name: "value", value: { value().description }))
    }

}