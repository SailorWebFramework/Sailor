// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  Unit+ObjectPosition.swift
//  

extension Unit {
    public struct ObjectPosition: Equatable, CustomStringConvertible {
        var value: String

        public var description: String {
            self.value
        }

        init(_ value: String) {
            self.value = value
        }

        ///The object position is a adjacent offset.
        public static func `with`(_ location: Unit.OPFull, _ adjacentOffset: Unit.LengthPercentage) -> Self {
            return .init("\(location) \(adjacentOffset)")
        }

        ///The object position is a length.
        public static func `with`(_ horizontal: Unit.OPLCRLP, _ vertical: Unit.OPTCBLP) -> Self {
            return .init("\(horizontal) \(vertical)")
        }

        ///The object position is a length.
        public static func `with`(_ horizontal: Unit.OPLCRLP, _ offsetX: Unit.LengthPercentage, _ vertical: Unit.OPTCBLP, _ offsetY: Unit.LengthPercentage) -> Self {
            return .init("\(horizontal) \(offsetX) \(vertical) \(offsetY)")
        }

        ///The object position is top.
        public static var `top`: Self {
            return .init("top")
        }

        ///The object position is bottom.
        public static var `bottom`: Self {
            return .init("bottom")
        }

        ///The object position is left.
        public static var `left`: Self {
            return .init("left")
        }

        ///The object position is right.
        public static var `right`: Self {
            return .init("right")
        }

        ///The object position is center.
        public static var `center`: Self {
            return .init("center")
        }


    }
}
